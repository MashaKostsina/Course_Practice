{
	"info": {
		"_postman_id": "558d49b5-356d-4129-9903-48341a7e5d15",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24134323"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"//в коллекции\r",
							"\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"//в коллекции\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name\", function () {\r",
							"pm.expect(jsonData.name).to.eql(\"Masha\");\r",
							"})\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age\", function () {\r",
							"pm.expect(jsonData.age).to.eql(\"25\");\r",
							"})\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary\", function () {\r",
							"pm.expect(jsonData.salary).to.eql(2000);\r",
							"})\r",
							"\r",
							"//Спарсить request.\r",
							"let reqData = request.data\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_request\", function(){\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"})\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age_request\", function(){\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"})\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary_request\", function(){\r",
							"    pm.expect(jsonData.salary).to.eql(+reqData.salary);\r",
							"})\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Salary_request_1_5_year\", function(){\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(+reqData.salary*4);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Masha",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"//в коллекции\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name\", function(){\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"})\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Age\", function(){\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"})\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary\", function(){\r",
							"    pm.expect(jsonData.salary).to.eql(+reqData.salary);\r",
							"})\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog_name\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name');\r",
							"})\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog_age\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age');\r",
							"})\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog_name_Luky\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"})\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog_age_4\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Masha&age=5&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Masha"
						},
						{
							"key": "age",
							"value": "5"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"//в коллекции\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name\", function(){\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"})\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age\", function(){\r",
							"    pm.expect(jsonData.age).to.eql(+reqData.age);\r",
							"})\r",
							"\r",
							"//Вывести в консоль параметр salary из request\r",
							"console.log(reqData.salary);\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1]);\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary_0\", function(){\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+reqData.salary);\r",
							"})\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_1\", function(){\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(reqData.salary*2);\r",
							"})\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_2\", function(){\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(reqData.salary*3);\r",
							"})\r",
							"pm.environment.set(\"variable_key\", \"variable_value\");\r",
							"\r",
							"//Создать в окружении переменную name, Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", reqData.name);\r",
							"\r",
							"//Создать в окружении переменную age, Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", reqData.age);\r",
							"\r",
							"//Создать в окружении переменную salary, Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", reqData.salary);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i < jsonData.salary.length; i++){\r",
							"    console.log(jsonData.salary[i])\r",
							"}\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for (item in jsonData.salary){\r",
							"    console.log(jsonData.salary[item])\r",
							"}\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for (key in jsonData['salary']){\r",
							"    if (jsonData['salary'].hasOwnProperty(key)){\r",
							"        console.log(key);\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Masha&age=25&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Masha"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"//в коллекции\r",
							"\r",
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let reqData = request.data\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"        pm.expect(jsonData).to.have.property('start_qa_salary');\r",
							" });\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"        pm.expect(jsonData).to.have.property('qa_salary_after_6_months');\r",
							" });\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"        pm.expect(jsonData).to.have.property('qa_salary_after_12_months');\r",
							" });\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"        pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');\r",
							" });\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"u_salary_5_years\", function () {\r",
							"        pm.expect(jsonData.person).to.have.property('u_salary_5_years');\r",
							" });\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"person\", function () {\r",
							"        pm.expect(jsonData).to.have.property('person');\r",
							" });\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check_start_qa_salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+reqData.salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+reqData.salary*2.7);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_1_5_year\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(+reqData.salary*3.3);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check_qa_salary_after_3_5_years\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(+reqData.salary*3.8);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"1_u_name_person\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+reqData.age);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_u_salary_5_years\", function () {\r",
							"     pm.expect(jsonData.person.u_salary_5_years).to.eql(+reqData.salary*4.2);\r",
							"});\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"for (key in jsonData['person']){\r",
							"    if (jsonData['person'].hasOwnProperty(key)){\r",
							"        console.log(key);\r",
							"    }\r",
							"}\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"for (let i = 0; i < jsonData.person.length; i++){\r",
							"    console.log(jsonData.person[i])\r",
							"}\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"for (item in jsonData.person){\r",
							"    console.log(jsonData.person[item])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Статус код 200",
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}